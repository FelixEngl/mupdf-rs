name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 500
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2019]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 500
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install LLVM
        if: matrix.os == 'windows-2019'
        run: choco install -y llvm
      - name: Setup msbuild
        if: matrix.os == 'windows-2019'
        uses: microsoft/setup-msbuild@v1.1
      - uses: actions-rs/cargo@v1
        timeout-minutes: 20
        if: matrix.os == 'windows-2019'
        env:
          LIBCLANG_PATH: "C:\\Program Files\\LLVM\\bin"
        with:
          command: test
      - uses: actions-rs/cargo@v1
        if: matrix.os != 'windows-2019'
        with:
          command: test
      - name: Test package mupdf-sys
        uses: actions-rs/cargo@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          command: package
          args: --manifest-path mupdf-sys/Cargo.toml

  asan:
    name: Address Sanitizer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 500
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rust-src
          override: true
      - name: cargo test
        run: |
          cargo test -Zbuild-std --target x86_64-unknown-linux-gnu
        env:
          RUSTFLAGS: -Zsanitizer=address

  valgrind:
    name: Valgrind
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 500
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.61.0
          override: true
      - uses: taiki-e/install-action@valgrind
      - uses: taiki-e/install-action@cargo-valgrind
      - run: cargo valgrind test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
